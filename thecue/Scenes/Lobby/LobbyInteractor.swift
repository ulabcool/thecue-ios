//
//  LobbyInteractor.swift
//  thecue
//
//  Created by Benjamin Grima on 02/07/2017.
//  Copyright (c) 2017 Usabilla. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LobbyBusinessLogic {
    func fetchTables(request: Lobby.FetchTables.Request)
    func fetchTableGames(request: Lobby.FetchTableGames.Request)
    func createGame(request: Lobby.CreateTableGame.Request)
    func deleteGame(request: Lobby.DeleteTableGame.Request)
}

protocol LobbyDataStore {
    var tables: [Table] { get set }
}

class LobbyInteractor: LobbyBusinessLogic, LobbyDataStore {
    var presenter: LobbyPresentationLogic?
    var worker: LobbyWorker = LobbyWorker()
    var tables: [Table] = []
    var currentTableGames: [LobbyItem] = []

    init() {

    }

    // MARK: use cases

    func fetchTables(request: Lobby.FetchTables.Request) {
        worker.fetchTables { [unowned self] tables in
            self.tables = tables
            let response = Lobby.FetchTables.Response(tables: tables)
            self.presenter?.presentTables(response: response)
        }
    }

    func fetchTableGames(request: Lobby.FetchTableGames.Request) {
        worker.fetchTableGames(withQueueName: request.queueName) { [unowned self] games in
            let response = Lobby.FetchTableGames.Response(items: games)
            self.presenter?.presentTableGames(response: response)
        }
    }

    func createGame(request: Lobby.CreateTableGame.Request) {
        worker.createGame(inQueue: request.queueName) { _ in
        }
    }

    func deleteGame(request: Lobby.DeleteTableGame.Request) {
        worker.deleteGame(inQueue: request.queueName) { _ in
        }
    }
}
