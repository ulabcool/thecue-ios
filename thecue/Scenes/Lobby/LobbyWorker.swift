//
//  LobbyWorker.swift
//  thecue
//
//  Created by Benjamin Grima on 02/07/2017.
//  Copyright (c) 2017 Usabilla. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase

class LobbyWorker {
    private var refQueues = Database.database().reference(withPath: "queues")
    private var refCurrentQueue: DatabaseReference?

    func fetchTables(completionHandler: @escaping ([Table]) -> Void) {
        let refTables = Database.database().reference().child("tables")
        refTables.observeSingleEvent(of: DataEventType.value, with: { (snapshot) in
            guard let tables = snapshot.value as? [[String: AnyObject]] else {
                completionHandler([])
                return
            }
            let resTables = tables.flatMap { Table(withDictionnary: $0) }
            completionHandler(resTables)
        })
    }

    func fetchTableGames(withQueueName queue: String, completionHandler: @escaping ([LobbyItem]) -> Void) {
        refCurrentQueue?.removeAllObservers()
        refCurrentQueue = refQueues.child(queue)
        refCurrentQueue?.observe(DataEventType.value, with: { (snapshot) in
            guard let queue = snapshot.value as? [String: AnyObject] else {
                completionHandler([])
                return
            }
            let array = Array(queue.values)
            guard let allValues = array as? [[String: AnyObject]] else {
                completionHandler([])
                return
            }

            var newItems = allValues.flatMap {
                LobbyItem(withDictionnary: $0)
            }

            newItems.sort { $0.createdAt < $1.createdAt }
            completionHandler(newItems)
        })
    }

    func createGame(inQueue queue: String, completionHandler: @escaping (Bool) -> Void) {
        let userId = Auth.auth().currentUser!.providerData[0].uid
        let item = ["userId": userId,
            "name": Auth.auth().currentUser!.displayName ?? "Unknown",
            "createdAt": ServerValue.timestamp()] as [String: Any]
        let refTableQueue = refQueues.child(queue)
        refTableQueue.child(userId).setValue(item) { error, _ in
            if error != nil {
                completionHandler(false)
                return
            }
            completionHandler(true)
        }
    }

    func deleteGame(inQueue queue: String, completionHandler: @escaping (Bool) -> Void) {
        let userId = Auth.auth().currentUser!.providerData[0].uid
        let refTableQueue = refQueues.child(queue)
        refTableQueue.child(userId).removeValue { error, _ in
            if error != nil {
                completionHandler(false)
                return
            }
            completionHandler(true)
        }
    }
}
