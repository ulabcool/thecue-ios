//
//  LobbyViewController.swift
//  thecue
//
//  Created by Benjamin Grima on 02/07/2017.
//  Copyright (c) 2017 Usabilla. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LobbyDisplayLogic: class {
    func displayTables(viewModel: Lobby.FetchTables.ViewModel)
    func displayTableGames(viewModel: Lobby.FetchTableGames.ViewModel)
}

class LobbyViewController: UIViewController, LobbyDisplayLogic {
    var interactor: LobbyBusinessLogic?
    var router: (NSObjectProtocol & LobbyRoutingLogic & LobbyDataPassing)?
    var displayedTables: Lobby.FetchTables.ViewModel?
    var displayedTableGames: [Lobby.FetchTableGames.ViewModel.DisplayedGame] = []
    var isInTheQueue = false

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = LobbyInteractor()
        let presenter = LobbyPresenter()
        let router = LobbyRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        let segmentChangedSelector = #selector(LobbyViewController.changedSegment(sender:))
        segmentedControl.addTarget(self, action: segmentChangedSelector, for: [.valueChanged])
        fetchTables()
    }

    // MARK: Tables

    @IBOutlet weak var segmentedControl: UISegmentedControl!

    func fetchTables() {
        let request = Lobby.FetchTables.Request()
        interactor?.fetchTables(request: request)
    }

    func displayTables(viewModel: Lobby.FetchTables.ViewModel) {
        displayedTables = viewModel
        segmentedControl.removeAllSegments()
        for (index, table) in viewModel.tables.enumerated() {
            segmentedControl.insertSegment(withTitle: table.name, at: index, animated: false)
        }
        segmentedControl.selectedSegmentIndex = 0
        changedSegment(sender: segmentedControl)
    }

    func changedSegment(sender: UISegmentedControl) {
        let index = sender.selectedSegmentIndex
        let table = displayedTables!.tables[index]
        let request = Lobby.FetchTableGames.Request(queueName: table.queue)
        interactor?.fetchTableGames(request: request)
    }

    // MARK: ListGames

    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var lobbyButton: UIButton!

    func displayTableGames(viewModel: Lobby.FetchTableGames.ViewModel) {
        displayedTableGames = viewModel.displayedGames
        isInTheQueue = viewModel.isInTheQueue

        tableView.reloadData()

        if viewModel.isInTheQueue {
            lobbyButton.setTitle("Leave queue", for: .normal)
            lobbyButton.backgroundColor = .leaveQueueColor
            return
        }
        lobbyButton.setTitle("Join queue", for: .normal)
        lobbyButton.backgroundColor = .joinQueueColor
    }

    // MARK: Join / Leave Queue

    @IBAction func lobbyButtonAction(_ sender: Any) {
        isInTheQueue ? leaveQueue() : joinQueue()
    }

    func joinQueue() {
        let index = segmentedControl.selectedSegmentIndex
        let table = displayedTables!.tables[index]
        let request = Lobby.CreateTableGame.Request(queueName: table.queue)
        interactor?.createGame(request: request)
    }

    func leaveQueue() {
        let index = segmentedControl.selectedSegmentIndex
        let table = displayedTables!.tables[index]
        let request = Lobby.DeleteTableGame.Request(queueName: table.queue)
        interactor?.deleteGame(request: request)
    }
}

extension LobbyViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedTableGames.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let identifier = "lobbyItemTableViewCellIdentifier"
        //swiftlint:disable:next force_cast
        let cell = tableView.dequeueReusableCell(withIdentifier: identifier, for: indexPath) as! LobbyItemTableViewCell
        let item = displayedTableGames[indexPath.row]
        cell.nameLabel.text = item.name
        return cell
    }
}
